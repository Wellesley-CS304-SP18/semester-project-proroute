# CS 304 Homework 7
# April 12, 2018
# Authors: Katy Ma and Isabel D'Alessandro

from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, session, send_from_directory, jsonify, flash)

app = Flask(__name__)
app = Flask(__name__, static_url_path="/static")

import sys,os,random
import dbconn2
import helperFunctions

app.config['TRAP_BAD_REQUEST_ERRORS'] = True
app.config['SECRET_KEY'] = 'something very secret'

# Route for rating movies
@app.route('/rateMovies/', methods=['GET', 'POST'])
def rateMovies():
    conn = dbconn2.connect(DSN)

    # check if there's a useridCookie in the browser already
    userid = request.cookies.get('useridCookie')

    if request.method == "GET":
        # if user is not logged in, redirect them to login page
        if not userid:
            return redirect(url_for('login'))
        # if user is logged in, direct them to rateMovies page
        else:
            if request.method == "GET":
                movies = helperFunctions.getMovies(conn)
                return render_template('rateMovies.html',
                                        header = 'Rate Movies',
                                        movies = movies, userid=userid)

    if request.method == "POST":
        # get the user's rating of a movie and that movie's tt from the form
        movie_rating = request.form['stars']
        tt = request.form['movie_tt']

        # if user submitted form but didn't select a movie rating
        if not movie_rating:
            flash('Please select a movie rating')
            return render_template('rateMovies.html',
                                    header = 'Rate Movies',
                                    movies = movies,userid=userid)
        # update the movie rating in the database and re-render the page
        # with all updated movies
        else:
            movies=helperFunctions.updateMovieRating(conn,userid,tt,movie_rating)
            return render_template('rateMovies.html',
                                    header='Rate Movies',
                                    movies=movies,userid=userid)

# Route for logging in
@app.route('/login/', methods=['GET', 'POST'])
def login():
    conn = dbconn2.connect(DSN)

    # check if there's a useridCookie in the browser already
    useridCookie = request.cookies.get('useridCookie')

    if request.method == "GET":
        return render_template('login.html',
                                header = 'Login to Rate Movies')

    if request.method == "POST":
        # get userid and password from the form
        userid = request.form['userid']
        passwd = request.form['passwd']

        # returns true or false
        loginSuccess = helperFunctions.loginSuccess(conn, userid, passwd)

        # if login credentials are verified, tell user they've logged in
        # and set their userid as a cookie
        if loginSuccess == "success":
            flash("Login succeeded!")
            resp = make_response(render_template('login.html',
                                                 header='Login to Rate Movies',
                                                 allCookies=request.cookies))
            resp.set_cookie('useridCookie',value=userid)
            return resp
        # if login is unsuccessful because user provides wrong password
        # or no userid, prompt them to re-attempt to login
        else:
            flash("No userid; please login")
            return render_template('login.html',
                                    header='Login to Rate Movies')

# Route for updating a movie's rating using ajax
@app.route('/setRatingAjax/',methods=['POST'])
def setRatingAjax():
    try:
        conn = dbconn2.connect(DSN)
        # check if there's a useridCookie in the browser already
        useridCookie = request.cookies.get('useridCookie')

        # get movie rating and tt from form
        movie_rating = request.form['rating']
        tt = request.form['tt']

        # update rating in the database
        helperFunctions.updateMovieRating(conn,useridCookie,tt,movie_rating)

        # find the movie's newly updated average rating
        averageRating= helperFunctions.getAverageRating(conn,tt)['averageRating']

        # send the data back to the frontend
        return jsonify({'useridCookie':useridCookie,'movie_rating':movie_rating,
        'movie_tt':tt,'averageRating':averageRating})

    except Exception as err:
        return jsonify({'error':True,'err':str(err)})


# Route for updating a movie
@app.route('/update/<tt>', methods=['GET', 'POST'])
def update(tt):
    conn = dbconn2.connect(DSN)
    if request.method == "GET":
        movie = helperFunctions.findMovie(conn, tt)
        return render_template('update.html',
                                movie=movie,
                                header = 'Update Movie')

    if request.method == "POST":
        title = request.form['movie-title']
        new_tt = request.form['movie-tt']
        release = request.form['movie-release']
        addedby = request.form['movie-addedby']
        director = request.form['movie-director']

        # if update button was pressed
        if request.form['submit'] == "update":
            status = helperFunctions.updateMovie(conn, tt, new_tt, title,
                                                release, addedby, director)

            # if movie was updated successfully
            if status == 200:
                # if the tt wasn't changed, re-render page with new movie info
                if tt == new_tt:
                    movie = {'title': title,
                             'tt': tt,
                             'release': release,
                             'addedby': addedby,
                             'director': director}
                    return render_template('update.html',
                                            movie = movie,
                                            header = 'Update Movie')
                # if the tt was updated, redirect to the corresponding url
                else:
                    return redirect(url_for('update', tt = new_tt))
            # if there was an error in updating the movie
            else:
                movie = helperFunctions.findMovie(conn, tt)
                return render_template('update.html',
                                        movie = movie,
                                        header = 'Update Movie')
        # if delete button was pressed
        else:
            helperFunctions.deleteMovie(conn, tt)
            return redirect(url_for('index'))

# Route for searching for a movie title
@app.route('/search/', methods=['GET', 'POST'])
def search():
    conn = dbconn2.connect(DSN)

    if request.method == "GET":
        return render_template('search.html', header = 'Search by Title')

    if request.method == "POST":
        # Get input string for search title from form
        search_title = request.form['search-title']
        tt = helperFunctions.findMovieTT(conn, search_title)
        # If no matching movie found, flash error message and re-render
        if tt == None:
            flash("No matching movie.")
            return render_template('search.html', header = 'Search by Title')
        # If matching movie found, redirect to corresponding movie page
        else:
            return redirect(url_for('update', tt = tt))

# Route for selecting movies that have a null value for release / director
@app.route('/select/', methods=['GET', 'POST'])
def select():
    conn = dbconn2.connect(DSN)

    if request.method == "GET":
        allmovies = helperFunctions.selectMovie(conn)
        return render_template('select.html',
                                allmovies = allmovies,
                                header = 'Select Movie')

    if request.method == "POST":
        selected_movie_tt = request.form.get('menu-tt')
        movie = helperFunctions.findMovie(conn, selected_movie_tt)
        return redirect(url_for('update', tt = movie['tt']))

# Home route
@app.route('/', methods=['GET', 'POST'])
def index():
    conn = dbconn2.connect(DSN)
    return render_template('base.html', header='WMDB Interactions')

# use the main function to connect the webpage to the database
if __name__ == '__main__':

    if len(sys.argv) > 1:
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()

    DSN = dbconn2.read_cnf()
    DSN['db'] = 'idalessa_db'
    app.debug = True
    app.run('cs.wellesley.edu',port)
# CS 304 Homework 7
# April 12, 2018
# Authors: Katy Ma and Isabel D'Alessandro

import sys
import MySQLdb
import dbconn2
from flask import flash

temporaryPassword = 'secret'

# Update movie rating in the database and return updated list of movies
def updateMovieRating(conn, userid, tt, movierating):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)

        # check movieRatings to see if user has already rated that movie
        curs.execute("SELECT * FROM movieRatings WHERE userid = %s AND tt = %s",
                    [userid, tt])
        foundMovie = curs.fetchone()

        # if user has rated the movie already, update their rating
        if foundMovie != None:
            curs.execute("UPDATE movieRatings SET movie_rating = %s WHERE " +
                        "tt = %s AND userid = %s", [movierating, tt, userid])
        # if not, insert new rating for movie associated with the userid
        else:
            curs.execute("INSERT INTO movieRatings (userid, movie_rating, tt)" +
                        " VALUES (%s, %s, %s)", (userid, movierating, tt))

        # calculate new average rating based on updated information
        curs.execute("SELECT SUM(movie_rating) FROM movieRatings WHERE " +
                    "tt = %s", [tt])
        newSumOfRatings = curs.fetchone()['SUM(movie_rating)']
        curs.execute("SELECT COUNT(*) FROM movieRatings WHERE tt = %s", [tt])
        newNumRatings = curs.fetchone()['COUNT(*)']
        newAvgRating = round((float(newSumOfRatings) / float(newNumRatings)),1)

        # update average rating in the movie table
        curs.execute("UPDATE movie SET averageRating = %s where tt = %s",
                    [newAvgRating, tt])

        # return updated movie list
        curs.execute("SELECT * FROM movie LIMIT 20")
        movies = curs.fetchall()
        return movies

    except MySQLdb.IntegrityError as err:
        return "Updating movie was unsuccessful"

# Get the average rating for a particular movie
def getAverageRating(conn,tt):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute("SELECT averageRating from movie where tt=%s",[tt])
    foundMovie=curs.fetchone()
    return foundMovie

# Get the first 20 movies from the database
def getMovies(conn):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute("SELECT * FROM movie LIMIT 20")
        movies = curs.fetchall()
        return movies
    except MySQLdb.IntegrityError as err:
        return "Fetching movies was unsuccessful"

# If user enters correct password, log them in successfully
def loginSuccess(conn, userid, passwd):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        if passwd == temporaryPassword:
            curs.execute("SELECT userid FROM movieRatings WHERE userid = userid")
            return "success"
    except MySQLdb.IntegrityError as err:
        return "Login unsuccessful"

# Using its title, find a movie's tt
def findMovieTT(conn, search_title):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        # Use wildcard to find movie title containing the search string
        like_title = "%" + search_title + "%"
        curs.execute("SELECT tt FROM movie WHERE title LIKE %s", [like_title])
        movie = curs.fetchone()
        if (movie == None):
            return None
        return movie['tt']

    except MySQLdb.IntegrityError as err:
        return "No movie found"

# Using its tt, find a movie
def findMovie(conn, tt):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        # Inner join movie and person to get info for both movie and director
        curs.execute("SELECT * FROM movie INNER JOIN person " +
                    "WHERE tt = %s AND director = nm", [tt])
        movie = curs.fetchone()
        # If director is not specified, search again for movie info only
        if (movie == None):
            curs.execute("SELECT * FROM movie WHERE tt = %s", [tt])
            movie = curs.fetchone()
        return movie

    except MySQLdb.IntegrityError as err:
        return "No movie found"

# Update a movie using new movie info
def updateMovie(conn, tt, new_tt, title, release, addedby, director):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        # If tt is changed, check if new_tt already exists
        if new_tt != tt:
            curs.execute("SELECT * FROM movie WHERE tt = %s", [new_tt])
            existing_movie = curs.fetchone()

            # If new_tt already exists, flash error message, return error status
            if (existing_movie != None):
                flash("This movie already exists. Try a different movie ID.")
                return 500

        # Check if director already exists
        curs.execute("SELECT * FROM person WHERE nm = %s", [director])
        existing_director = curs.fetchone()

        # If director doesn't exist, flash error message, return error status
        if (existing_director == None):
            flash("This director doesn't exist. " +
                    "Please enter a valid director ID.")
            return 500

        # Normalize attributes
        new_tt = check_if_none(new_tt)
        addedby = check_if_none(addedby)
        director = check_if_none(director)

        # If no errors, update the movie and return succuss status
        curs.execute("UPDATE movie SET tt = %s, title = %s, `release` = %s, " +
                    "addedby = %s, director = %s where tt = %s",
                    [new_tt, title, release, addedby, director, tt])
        flash(title + ' was updated successfully!')
        return 200

    except MySQLdb.IntegrityError as err:
        return "Error updating movie"

# Using its tt, delete a movie
def deleteMovie(conn, tt):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute("DELETE FROM movie WHERE tt = %s", [tt])
        flash('Movie was deleted')

    except MySQLdb.IntegrityError as err:
        return "Error deleting movie"

# Select all movies that have a null value for release / director
def selectMovie(conn):
    try:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute("SELECT tt, title FROM movie " +
                    "WHERE director is null OR `release` is null")
        allmovies = curs.fetchall()
        return allmovies

    except MySQLdb.IntegrityError as err:
        return "Error fetching movies"

# Helper function to check if attribute is None
# Return None if attribute is "None", "null" or 0
def check_if_none(attribute):
    if attribute != "None" and attribute != "null" and attribute != 0:
        return attribute
-- CS 304 Homework 7
-- April 12, 2018
-- Authors: Katy Ma and Isabel D'Alessandro

ALTER TABLE movie
  ADD averageRating float(2,1);

CREATE TABLE IF NOT EXISTS movieRatings (
  userid INT(10) NOT NULL,
  movie_rating ENUM('1','2','3','4','5'),
  tt INT(10) NOT NULL
);
<!-- CS 304 Homework 7
April 12, 2018
Authors: Katy Ma and Isabel D'Alessandro -->

<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name=author content="Katy Ma">
    <meta name=description content="">
    <meta name=keywords content="">
    <title>{{title}}</title>
  </head>
  <body>
    <div id="navigation">
      <ul>
        <li><a href="/">Home</a>
        <li><a href="/search/">Search by Title</a>
        <li><a href="/select/">Select from Incomplete Movies</a>
        <li><a href="/login/">Login</a>
        <li><a href="/rateMovies/">Rate Movies</a>
      </ul>
    </div>
    <div id="content">
      {% with messages = get_flashed_messages() %}
        {% if messages %}
          {% for message in messages %}
            <p name="message">{{message}}</p>
          {% endfor %}
        {% endif %}
      {% endwith %}

      <h1>{{header}}</h1>

      {% block content %}
      {% endblock %}
    </div>
  </body>
</html>
{% extends "base.html" %}
{% block content %}
<form method="post" action="">
    <p><label for="userid">Userid: <input type="text" name="userid"></label></p>
    <p><label for="passwd">Password: <input type="password" name="passwd"></label></p>
    <p><button type="submit">submit</button></p>
</form>
{% endblock %}
{% extends "base.html" %}
{% block content %}

<p><button id="progressive_enhancement">Turn On Progressive Enhancement</button></p>

<p>Logged in as <strong>{{userid}}</strong></p>

<section id="rate_movies">
<table id="movie_list">
      <tr><th>Title (year)</th><th>Rating</th><th>Your rating</th></tr>

      {% for movie in movies %}
        <tr class="movie_row">
          <td>{{movie.title}} ({{movie.release}})</td>
          <td class="rating">{{movie.averageRating}}</td>
          <td>
            <form data-tt={{movie.tt}} action="" method="POST">
              <input type="hidden" name="movie_tt" value="{{movie.tt}}">
              <label>1 <input type="radio" name="stars" value="1"></label>
              <label>2 <input type="radio" name="stars" value="2"></label>
              <label>3 <input type="radio" name="stars" value="3"></label>
              <label>4 <input type="radio" name="stars" value="4"></label>
              <label>5 <input type="radio" name="stars" value="5"></label>
              <input type="submit" value="rate this">
            </form>
          </td>
        </tr>
      {% endfor %}
    </table>
  </section>

  <script src="https://code.jquery.com/jquery-3.2.1.js"></script>

  <script>
    var url_for_setRatingsAjax = {{url_for("setRatingAjax")}};
    var progressive_on = false;

    $("#progressive_enhancement")
        .on('click',
            function toggleProgessiveEnhancement() {
                if( progressive_on ) {
                    // turn it off
                    $("input[name=stars],input[type=submit]").show();
                    $("#progressive_enhancement")
                        .text("Turn on Progressive Enhancement");
                    progressive_on = false;
                } else {
                    $("input[name=stars],input[type=submit]").hide();
                    $("#progressive_enhancement")
                         .text("Turn off Progressive Enhancement");
                    progressive_on = true;
                }
            });
  </script>

  <script>

    // Use ajax to update movie rating in the database, then update
    // averageRating of movie on the frontend
    function sendRating(rating, tt, closestAverageRating){
     $.post(url_for_setRatingsAjax,{rating:rating, tt:tt},
     function(obj){
       $(closestAverageRating).text(obj.averageRating);
     })
    }

    // When user rates a movie, bold the number and find the associated
    // tt and average rating
    $("input").on("click",function(event){
     var rating = $(this).attr("value");
     // if any labels for the selected movie are bold, unbold them
     $(this).closest(".movie_row").find("label").css('font-weight','normal');
     // bold the label that was selected by the user
     $(this).closest("label").css('font-weight','bold');
     var tt = $(this).closest("form").attr("data-tt");
     var closestAverageRating = $(this).closest(".movie_row").find(".rating");
     sendRating(rating, tt, closestAverageRating);
    });
  </script>

{% endblock %}
